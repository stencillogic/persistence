Interaction protocol description

=== Server message BNF: ===

  <server_message> ::= <error_message> | <success_message> | <recordset_message> | <progress_message> | <hello_message> |
                       <auth_request_message> | <auth_responce_message> | <goodbye_message>

  <error_message> ::= <error_msg_magic> <text_string>
    <error_msg_magic> ::= 0x0F

    <text_string> ::= <unbound_text_string> | <limited_text_string>
    <unbound_text_string> ::= <unbound_text_string_magic> { <string_chunk> } <string_terminator>
    <unbound_text_string_magic> ::= 0x01
    <string_chunk> := <chunk_length> { <character> }
    <chunk_length> := unsigned byte, number of bytes in chunk
    <character> ::= any byte
    <string_terminator> ::= 0x00 (chunk of length 0)

    <limited_text_string> ::= <limited_text_string_magic> <text_string_length> { <string_chunk> } <string_terminator>
    <limited_text_string_magic> ::= 0xFE
    <text_string_length> ::= uint64 length of the string in bytes

  <success_message> ::= <success_message_with_text> | <success_message_without_text>
    <success_message_with_text> ::= <success_message_with_text_magic> <text_string>
    <success_message_with_text_magic> ::= 0xF1
    <success_message_without_text> ::= <success_message_without_text_magic>
    <success_message_without_text_magic> ::= 0xF2

  <recordset_message> ::= <recordset_message_magic> <recordset_descriptor> { <recordset_row> } <recordset_end>
    <recordset_message_magic> ::= 0xFF

    <recordset_descriptor> ::= <col_num> { <col_descriptor> }
    <col_num> ::= column number in recordset, uin16 in network order
    <col_descriptor> ::= <data_type> <col_alias>
    <data_type> ::= <data_type_code> [ <data_type_length> | <data_type_precision> <data_type_scale> ] <flags>
    <data_type_code> ::= one of _column_datatype enum values, uint8
    <data_type_length> ::= uint64 value in network order - max length defined for data type
    <data_type_precision> ::= 1-byte value of data type precision
    <data_type_scale> ::= 1-byte value of data type scale
    <flags> ::= uint8 bitmask, bit 0x01 if set then field is nullable
    <col_alias> ::= <text_string>

    <recordset_row> ::= <recordset_row_magic> <recordset_row_header> { <cell_value> }
    <recordset_row_magic> ::= 0x06
    <recordset_row_header> ::= [ <nulls_bitmask> ]
    <nulls_bitmask> ::= bitmask, (0) is for null value, (1) is for non-null value, the length is defined by number of nullable columns
    <cell_value> ::= <text_string> | <numeric_value> | <timestamp_value> | <timestamp_with_tz_value> | <smallint_value> | <integer_value> | <float_value> | <double_precision_value> | <date_value> | <null_value>
    <numeric_value> ::= bytes representing serialized numeric value: 
        1st byte:
            1st bit - decimal sign (0 - positive, 1 - negative)
            2nd bit - set if exponent part is present
            remaining bits - mantissa length in bytes
        other bytes: 
            mantissa bytes, uint8 sequence
            exponent, sint8 byte
    <timestamp_value> ::= uint64 value of microseconds in network order
    <timestamp_with_tz_value> ::= uint64 value of microseconds in network order, sint16 timezone minutes in network order
    <smallint_value> ::= sint16 value in network order
    <integer_value> ::= sint32 value in network order
    <float_value> ::= float32 value in network order
    <double_precision_value> ::= float64 value in network order
    <date_value> ::= uint64 value of seconds in network order

    <recordset_end> ::= 0x88

  <progress_message> ::= 0x44

  <hello_message> ::= <hello_message_magic> <protocol_version> [ <text_string> ]
    <hello_message_magic> ::= 0x1985 (network order)
    <protocol_version> ::= <major_protocol_version> <minor_protocol_version>
    <major_protocol_version> ::= uint16 in network order
    <minor_protocol_version> ::= uint16 in network order

  <auth_request_message> ::= <auth_request_message_magic> 
    <auth_request_message_magic> ::= 0x11

  <auth_responce_message> ::= <auth_responce_message_magic> ( <auth_success> | <auth_fail> )
    <auth_responce_message_magic> ::= 0x33
    <auth_success> ::= 0xCC
    <auth_fail> ::= 0xFF

  <goodbye_message> ::= 0xBE


=== Client message BNF: ===

  <client_message> ::= <hello_message> | <auth_message> | <sql_request_message> | <cancel_message> | <goodbye_message>

  <hello_message> ::= <hello_message_magic> <client_encoding>
    <hello_message_magic> ::= 0x1406 (network order)
    <client_encoding> ::= default client encoding, uint16 value matching one of values from "encoding" enum in common/encoding.h except ENCODING_UNKNOWN

  <auth_message> ::= <auth_message_magic> | <credentials>
    <auth_message_magic> ::= 0x22
    <credentials> ::= <user_name> <encrypted_password>
    <user_name> ::= <text_string>
    <encrypted_password> ::= 64 uint8 values in network order (512 bit sha-3)

  <sql_request_message> ::= <sql_request_message_magic> <sql_request>
    <sql_request_message_magic> ::= 0x55
    <sql_request> ::= <text_string>

  <cancel_message> ::= <cancel_message_magic>
    <cancel_message_magic> ::= 0x57

  <goodbye_message> ::= 0xBE


=== Protocol semantics ===

Typical message flow:

1. Client connects to server and sends client <hello_message>.
2. Server answers with server's <hello_message> and sends <auth_request_message>.
3. Client authenticates with sending <auth_message> to server.
4. Server checks client's credentials and sends <auth_responce_message> to client.
5. If authentication was successful client can send <sql_request_message> or <goodbye_message> to server.
6. Server can send error message while parsing and checking sql from the client. Client can poll server for error while sending large sql query.
7. Server executes sql and sends <progress_message> during execution or <recordset_message> or <success_message> when execution completes to the client.
8 .During execution of <sql_request_message> by server client can send <cancel_message>, server will stop execution of the request and will send <success_message> to confirm execution was stopped.
9. If client sends <goodbye_message> server answers with <goodbye_message> and closes connection.

Client's <auth_message> semantics:
<user_name> must not be longer than 64 characters long.


